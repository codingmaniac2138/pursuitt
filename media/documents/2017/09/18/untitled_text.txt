# Main configuration of boxer
url.api_prefix: '/api/v1'

# Additional data for html report
report:
    title: "Custom html report"

debug: true

# python locals for all __python__ code blocks
# only functions and classes are exported.
python_locals: |
    import datetime
    import json
    import requests
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    import unipath
    import os
    import sys
    import pprint
    import random
    import string
    sys.path.append(os.getcwd())
    import util.xpc_helpers as xpc_util
    import util.xap_helpers as xap_util
    import util.webpa_helpers as webpa_util
    import util.graphite as graph_util


    @on_boxer_setup
    def create_custom_session(context):
        # create our own requests.Session object to set SSL cert.
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        cert_path = os.path.abspath('conf/xpcsmoketest.pem')
        session = requests.Session()
        session.cert = cert_path
        session.verify = False
        session.headers = xpc_util.get_headers()
        context['session'] = session

    @on_boxer_start
    def setup(context):

        shared_context['hosturl'] = context['url.scheme'] + "://" + context['url.host']
        cpemac = context['cpe_mac']
        mac_ip = context['mac_ip']

        # Get Env details
        if context['service'] == "xap":
            shared_context['xap_version'] = xap_util.get_xap_version(shared_context['hosturl'])
        else:
            shared_context['xpc_version'] = xpc_util.get_xpc_version(shared_context['hosturl'])

        shared_context['env_name'] = xpc_util.get_env_name(shared_context['hosturl'])

        #Start Graph Metric server if required
        if ('graph_report' in context and context['graph_report'] == 'True'):
            shared_context['graph_server_metric'] = graph_util.Graphite_Server_Metric()

        #Reboot device if command line option is given
        if (context['reboot_cpe'] == 'True'):
            reboot_device(mac_ip, cpemac, context['webpa_gateway'])

        # Get rdkb version, reboot device again if needed. Exit on failure.
        shared_context['rdkb_version'] = webpa_util.verify_rdkb_version(cpemac, mac_ip, context['webpa_gateway'])
        if (shared_context['rdkb_version'] is None):
            print "Reboot failed. Cannot get rdkb version. Exit !"
            sys.exit(255)

        print


    @on_boxer_end
    def handle_boxer_end(context, data):
        print
        #print('Generating json report ...................')
        #json_report_status = gen_json_report(context, data)
        #pprint.pprint(data)


    @export
    def retry_pending_task(context):
        if ('Is-Pending' in context['response.headers'] and context['response.headers.Is-Pending'] == 'True'):
            if context.get('retries', 0) < 5:
                print "Retrying Get since Async task still pending..."
                sleep(5)
                raise RetryCase("Retrying Get since Async task still pending...")
            else:
                print('Failed... Too many retries for pending task')


    @export
    def verify_states(context, exp_connection_state, exp_bedtime_state):

        if context['request.method'] == "get":
            if not context['response.json.data']:
                print "Failed response.json.data is empty"
                return False

            is_valid_states = True
            # check response states for each mac in list
            for mac in context['device_macs']:
                is_mac_in_list = False
                for device_info in context['response.json.data']:
                    if device_info['device_mac'] == mac:
                        is_mac_in_list = True
                        if (device_info['connection_state'] != exp_connection_state):
                            print "Failed expected connection_state: " + exp_connection_state + " " + device_info['device_mac']
                            is_valid_states = False
                        if (device_info['bedtime_state'] != exp_bedtime_state):
                            print "Failed expected bedtime_state: " + exp_bedtime_state + " " + device_info['device_mac']
                            is_valid_states = False

                if is_mac_in_list == False:
                    print "Failed, mac missing from response: " + mac
                    is_valid_states = False

            return is_valid_states
        else:
            # for Post requests, the data format is slightly different
            if not context['response.json.data.schedule_list']:
                print "Failed response.json.data is empty"
                return False

            is_valid_states = True
            for device_info in context['response.json.data.schedule_list']:
                if device_info['device_mac'] in context['device_macs']:
                    if (device_info['connection_state'] != exp_connection_state):
                        print "Failed expected connection_state: " + exp_connection_state + " " + device_info['device_mac']
                        is_valid_states = False
                    if (device_info['bedtime_state'] != exp_bedtime_state):
                        print "Failed expected bedtime_state: " + exp_bedtime_state + " " + device_info['device_mac']
                        is_valid_states = False
            return is_valid_states


    @export
    def set_device_macs_in_request(context):
        del context['request.body.device_mac_list'][:]
        for device_mac in context['device_macs']:
            context['request.body.device_mac_list'].append(device_mac)

    @export
    def gen_fake_macs(count):
        length = 7
        myid = "11111"
        macs = []
        for i in range(count):
            rand_hex_str = ''.join(random.choice(string.hexdigits) for _ in range(length))
            mac = myid + rand_hex_str
            macs.append(mac.upper())
        return macs


    @export
    def get_single_connected_device(device_list):
        for device in device_list:
            if (device["is_active"] == True):
                return device["device_mac"]
        return None


    @export
    def retrytestcase(context):
        if context.get('retries', 0) < 5:
            if (context['response.json.status'] == 503):
                sleep(10)
                print "503 device busy. Retrying Test..."
                raise RetryCase("Retrying Test...")
            elif (context['response.json.status'] == 520):
                sleep(10)
                print "520 error. Retrying Test..."
                raise RetryCase("Retrying Test...")
            elif (context['response.json.status'] == 500 and
                    context['response.json.error_code'] in [5013, 5008, 5012]):
                sleep(10)
                print "Retrying Test..."
                raise RetryCase("Retrying Test...")
            elif (context['response.json.status'] == 409):
                sleep(10)
                print "409 error. Retrying Test..."
                raise RetryCase("Retrying Test...")
            else:
                print('Failed Response: {}', context['response.json'])
        else:
            print('Failed Response: {}', context['response.json'])


    @export
    def reboot_device(mac_ip, cpemac, webpa_gateway):
        reboot_response = webpa_util.reboot_device(mac_ip, cpemac, webpa_gateway)
        if reboot_response:
            print "Sleep 600 after device reboot."
            sleep(600)

            for iteration in range(0, 600, 30):
                sleep(30)
                webpa_agent_status = webpa_util.check_webpa_agent(cpemac, webpa_gateway)

                if webpa_agent_status:
                    reboot_status = True
                    print "Finished the reboot process, device is up now, WebPa is up now!"
                    break
                else:
                    reboot_status = False
                    print 'Device is rebooting, please wait...'

            if not reboot_status:
                print "Failed to reboot the device!"
            else:
                print 'WebPa is up now.'


    @export
    def send_metric_to_graphite(context, shared_context):
        graph_metric = shared_context['graph_server_metric']
        graph_monitor_apply_associate_time = graph_metric.gen_monitor_key_apply_associate(
                                                   shared_context['env_name'],
                                                   shared_context['xpc_version'],
                                                   shared_context['rdkb_version'],
                                                   context['cpe_mac'],
                                                   context['request.duration'])
        graph_metric.gen_graphite_data(graph_monitor_apply_associate_time, context['request.duration'])


    @export
    def send_postget_metric_to_graphite(context, shared_context):
        graph_metric = shared_context['graph_server_metric']
        graph_postget_metric_key = graph_metric.gen_perf_key_name(
                                                   shared_context['env_name'],
                                                   '',
                                                   context['request.method'],
                                                   context['url.query.group_id'],
                                                   shared_context['xpc_version'],
                                                   shared_context['rdkb_version'],
                                                   context['url.scheme'],
                                                   context['cpe_mac'])

        graph_metric.gen_graphite_data(graph_postget_metric_key, context['request.duration'])


    @export
    def format_seconds(value):
        try:
            result = datetime.timedelta(seconds=value)
        except:
            result = ""
        return result


    @export
    def gen_json_report(context, data):
        """
        Generate report as a json file.
        :param data:
        :return string in json format:
        """        
        suite_list = []
        overall_total_tests = 0
        overall_total_passed = 0
        overall_total_failed = 0
        overall_total_skipped = 0

        for suite_data in data['suites']:
            test_list = []
            test_failed_count = 0
            test_skipped_count = 0
            test_passed_count = 0
            total_test_count = 0

            for test_data in suite_data['tests']:
                total_test_count += 1
                overall_total_tests += 1
        
                case_list = []
                case_failed_count = 0
                case_skipped_count = 0
                case_passed_count = 0
                total_case_count = 0
                for case_data in test_data['cases']:
                    total_case_count += 1
                    if 'errors' in case_data and case_data['errors']:
                        case_status = 'Failed'
                        case_failed_count += 1
                    elif 'skip' in case_data and case_data['skip']:
                        case_status = 'Skipped'
                        case_skipped_count += 1
                    else:
                        case_status = 'Passed'
                        case_passed_count += 1
                    
                    if 'name' in case_data:
                        case_name = case_data['name']
                    else:
                        case_name = 'No Name'
                    
                    case_list.append({
                        'case_name': case_name,
                        'case_status': case_status,
                        'case_full_url': case_data['full_url']
                    })
                
                test_status = 'Passed'
                if case_skipped_count > 0:
                    test_status = 'Skipped'
                if case_failed_count > 0:
                    test_status = 'Failed'
        
                if case_failed_count == 0 and case_passed_count > 0:
                    test_passed_count += 1
                elif case_failed_count > 0:
                    test_failed_count += 1
                elif case_skipped_count > 0:
                    test_skipped_count += 1
                
                test_list.append({
                    'test_name': test_data['test']['name'],
                    'test_description': test_data['test']['description'],
                    'test_duration': str(format_seconds(test_data['test']['duration'])),
                    'test_status': test_status,
                    'case_list': case_list,
                    'case_passed_count': case_passed_count,
                    'case_failed_count': case_failed_count,
                    'case_skipped_count': case_skipped_count,
                    'total_cases': total_case_count,
                })

            overall_total_passed += test_passed_count
            overall_total_failed += test_failed_count
            overall_total_skipped += test_skipped_count
            
            suite_list.append({
                'suite_name': suite_data['suite']['name'],
                'suite_duration': str(format_seconds(suite_data['suite']['duration'])),
                'suite_description': suite_data['suite']['description'],
                'test_list': test_list,
                'total_tests': total_test_count,
                'total_passed': test_passed_count,
                'total_failed': test_failed_count,
                'total_skipped': test_skipped_count,
                'total_external_failure': 0,
                'total_db_failure': 0,
            })
        
        result_dict = {
            'date': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'suite_list': suite_list,
            'overall_results': {
                'overall_total_tests': overall_total_tests,
                'overall_total_passed': overall_total_passed,
                'overall_total_failed': overall_total_failed,
                'overall_total_skipped': overall_total_skipped,
                'overall_total_external_failure': 0,
                'overall_total_db_failure': 0,
            }
        }

        if 'env_name' in data['shared_context'].keys():
            result_dict['environment'] = data['shared_context']['env_name']
        else:
            result_dict['environment'] = 'No ENV provided.'
        
        if 'cpe_mac' in context.keys():
            cpe_mac = context['cpe_mac']
        else:
            cpe_mac = None
        if 'webpa_gateway' in context.keys():
            webpa_gateway_url = context['webpa_gateway']
        else:
            webpa_gateway_url = None

        if cpe_mac and webpa_gateway_url:
            rdkb_version = webpa_util.get_rdkb_version(cpe_mac, webpa_gateway_url)
            result_dict['rdkb_version'] = rdkb_version
        else:
            result_dict['rdkb_version'] = "Unable to fetch rdkb version due to invalid parameters."

        json_data = json.dumps(result_dict, sort_keys=True, indent=4, separators=(',', ': '))
        json_file_path = context['json_file_path']
        unipath.Path(json_file_path).write_file(json_data.encode('utf-8'))
        return True



